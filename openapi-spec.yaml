openapi: "3.0.0"

info:
  version: 0.0.1
  title: HPC Gateway Interface
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

paths:

  # handle population of services
  /services:
    get:
      summary: "Get all available services"
      # security:
      #   - apiKey: [ ]
      #   - oauth2: [ email ]
      operationId: get_all_services
      responses:
        200:
          description: List of all available HPC services
          content:
            application/json:
              schema:
                type: array
                description: List of all available HPC services
                items:
                  $ref: '#/components/schemas/HPCService'
        # 401:
        #   description: Unauthorized request
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        500:
          description: An error has occurred
          content:
            application/json:
              schema:
                type: string

  # manage and monitor job status
  /job:
    post:
      summary: "Submit a new job"
      # security:
      #   - apiKey: [ ]
      #   - oauth2: [ email ]
      operationId: submit_new_job
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobRequest"
      responses:
        201:
          description: Job was submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobStatus"
        400:
          description: Invalid job request
          content:
            application/json:
              schema:
                type: string
        # 401:
        #   description: Unauthorized request
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        500:
          description: There was an error during job submission
          content:
            application/json:
              schema:
                type: string

  /job/{job_id}:
    get:
      summary: "Get job status"
      # security:
      #   - apiKey: [ ]
      #   - oauth2: [ email ]
      operationId: get_job_status
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Job status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStatus'
        # 401:
        #   description: Unauthorized request
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        404:
          description: Job not found
          content:
            application/json:
              schema:
                type: string
        500:
          description: There was an error during job status retrieval
          content:
            application/json:
              schema:
                type: string

  # handle population of infrastructures
  /infrastructure:
    post:
      summary: "Create a new infrastructure"
      # security:
      #   - apiKey: [ ]
      #   - oauth2: [ email ]
      operationId: async_create_new_infrastructure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Infrastructure"
      responses:
        201:
          description: Infrastructure was created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfrastructureSummary"
        400:
          description: Invalid infrastructure request
          content:
            application/json:
              schema:
                type: string
        # 401:
        #   description: Unauthorized request
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        500:
          description: There was an error during infrastructure creation
          content:
            application/json:
              schema:
                type: string

  /infrastructure/{infrastructure_name}:
    get:
      summary: "Get infrastructure"
      # security:
      #   - apiKey: [ ]
      #   - oauth2: [ email ]
      operationId: async_get_infrastructure
      parameters:
        - name: infrastructure_name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Infrastructure returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfrastructureSummary'
        # 401:
        #   description: Unauthorized request
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        404:
          description: Infrastructure not found
          content:
            application/json:
              schema:
                type: string
        500:
          description: There was an error during infrastructure retrieval
          content:
            application/json:
              schema:
                type: string

  /infrastructure/{infrastructure_name}/telemetry:
    get:
      summary: "Get infrastructure telemetry"
      # security:
      #   - apiKey: [ ]
      #   - oauth2: [ email ]
      operationId: async_get_infrastructure_telemetry
      parameters:
        - name: infrastructure_name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Infrastructure telemetry returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfrastructureTelemetry'
        # 401:
        #   description: Unauthorized request
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        404:
          description: Infrastructure not found
          content:
            application/json:
              schema:
                type: string
        500:
          description: There was an error during infrastructure telemetry retrieval
          content:
            application/json:
              schema:
                type: string

  # data transfers
  /data:
    post:
      summary: "Transfer a remote HTTP file to the target infrastructure"
      # security:
      #   - apiKey: [ ]
      #   - oauth2: [ email ]
      operationId: async_transfer_remote_file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileTransferRequest"
      responses:
        201:
          description: File transferred successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileTransferStatus"
        400:
          description: Invalid data request
          content:
            application/json:
              schema:
                type: string
        # 401:
        #   description: Unauthorized request
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        500:
          description: There was an error during file transfer
          content:
            application/json:
              schema:
                type: string

  /data/{file_transfer_id}:
    get:
      summary: "Get file transfer status"
      # security:
      #   - apiKey: [ ]
      #   - oauth2: [ email ]
      operationId: async_get_file_transfer_status
      parameters:
        - name: file_transfer_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: File transfer status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileTransferStatus'
        # 401:
        #   description: Unauthorized request
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        404:
          description: File transfer not found
          content:
            application/json:
              schema:
                type: string
        500:
          description: There was an error during file transfer retrieval
          content:
            application/json:
              schema:
                type: string

  /s3_data:
    post:
      summary: "Transfer an S3 object to the target infrastructure"
      # security:
      #   - apiKey: [ ]
      #   - oauth2: [ email ]
      operationId: async_transfer_remote_s3_file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/S3FileTransferRequest"
      responses:
        201:
          description: File transferred successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/S3FileTransferStatus"
        400:
          description: Invalid data request
          content:
            application/json:
              schema:
                type: string
        # 401:
        #   description: Unauthorized request
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        500:
          description: There was an error during S3 file transfer
          content:
            application/json:
              schema:
                type: string

  /s3_data/{file_transfer_id}:
    get:
      summary: "Get S3 file transfer status"
      # security:
      #   - apiKey: [ ]
      #   - oauth2: [ email ]
      operationId: async_get_s3_file_transfer_status
      parameters:
        - name: file_transfer_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: S3 file transfer status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/S3FileTransferStatus'
        # 401:
        #   description: Unauthorized request
        #   content:
        #     application/json:
        #       schema:
        #         type: string
        404:
          description: S3 file transfer not found
          content:
            application/json:
              schema:
                type: string
        500:
          description: There was an error during s3 file transfer retrieval
          content:
            application/json:
              schema:
                type: string

components:

  schemas:

    HPCService:
      description: Description of the HPC service
      type: object
      required:
        - id
        - name
        - version
        - type
      properties:
        id:
          description: UUID of the service
          type: string
          format: uuid
        name:
          description: Name of the service
          $ref: "#/components/schemas/ServiceName"
        version:
          description: Version of the service
          type: string
        type:
          description: Type of the service
          $ref: "#/components/schemas/ServiceType"

    ServiceName:
      type: string
      enum:
        - kalman_filter
        - min_max_filter
        - fft_filter
        - test_filter

    ServiceType:
      type: string
      enum:
        - filter

    Infrastructure:
      description: Infrastructure schema
      type: object
      required:
        - name
        - host
        - username
        - hostname
        - scheduler
        - ssh_key
      properties:
        name:
          type: string
        host:
          type: string
        username:
          type: string
        hostname:
          type: string
        scheduler:
          $ref: "#/components/schemas/HPCSchedulerType"
        ssh_key:
          description: ssh key object
          type: object
          properties:
            type:
              $ref: "#/components/schemas/SSHKeyType"
            path:
              type: string
            password:
              type: string

    InfrastructureSummary:
      description: Infrastructure schema
      type: object
      required:
        - name
        - host
        - hostname
        - scheduler
      properties:
        name:
          type: string
        host:
          type: string
        hostname:
          type: string
        scheduler:
          $ref: "#/components/schemas/HPCSchedulerType"

    InfrastructureTelemetry:
      description: Infrastructure telemetry schema
      type: object
      required:
        - name
        - host
        - hostname
        - scheduler
        - partitions
      properties:
        name:
          type: string
        host:
          type: string
        hostname:
          type: string
        scheduler:
          $ref: "#/components/schemas/HPCSchedulerType"
        partitions:
          type: array
          items:
            $ref: '#/components/schemas/PartitionTelemetry'

    PartitionTelemetry:
      description: Partition telemetry schema
      type: object
      required:
        - name
        - total_nodes
        - avail_nodes
        - total_cpus
        - avail_cpus
        - running_jobs
        - queued_jobs
      properties:
        name:
          type: string
        total_nodes:
          type: integer
        avail_nodes:
          type: integer
        total_cpus:
          type: integer
        avail_cpus:
          type: integer
        running_jobs:
          type: integer
        queued_jobs:
          type: integer

    HPCSchedulerType:
      type: string
      enum:
        - pbs
        - slurm

    SSHKeyType:
      type: string
      enum:
        - ssh-rsa
        - ssh-ed25519

    JobRequest:
      description: Job request schema
      type: object
      required:
        - services
        - infrastructure
      properties:
        services:
          description: list of services to use for a job
          type: array
          items:
            type: object
            properties:
              name:
                $ref: "#/components/schemas/ServiceName"
              version:
                type: string
        infrastructure:
          description: Name of the HPC infrastructure
          type: string
        params:
          description: arbitrary parameters passed for a job
          type: object

    JobStatus:
      description: Job status schema
      type: object
      required:
        - id
        - scheduler_id
        - infrastructure
        - status
        # - success
      properties:
        id:
          description: UUID of the job
          type: string
          format: uuid
        scheduler_id:
          description: ID returned by batch scheduler
          type: string
        infrastructure:
          description: Name of the HPC infrastructure
          type: string
        status:
          description: Status of the job
          $ref: "#/components/schemas/JobStatusCode"
        # exit_code:
        #   description: Exit code of the job
        #   type: integer
        #   minimum: 0
        #   maximum: 255
        # success:
        #   description: Flag whether the job is successful for simpler statuses
        #   type: boolean

    FileTransferRequest:
      description: File transfer request schema
      type: object
      required:
        - src
        - dst
        - infrastructure
      properties:
        src:
          description: URI of a source file to download. Support http, https, ftp and s3 as a protocol
          type: string
          format: uri
        dst:
          description: Path in the file system of the infrastructure to save the src file to 
          type: string
        infrastructure:
          description: Name of the HPC infrastructure
          type: string

    FileTransferStatus:
      description: File transfer status schema
      type: object
      required:
        - id
        - status
        - src
        - dst
        - infrastructure
      properties:
        id:
          description: UUID of the file transfer
          type: string
          format: uuid
        src:
          description: URI of a source file to download. Support http, https, ftp and s3 as a protocol
          type: string
          format: uri
        dst:
          description: Path in the file system of the infrastructure to save the src file to 
          type: string
        infrastructure:
          description: Name of the HPC infrastructure
          type: string
        status:
          description: Status of the file transfer
          $ref: "#/components/schemas/FileTransferStatusCode"
        reason:
          description: Additional information, when something went wrong
          type: string
          default: ""

    S3FileTransferRequest:
      description: S3 file transfer request schema
      type: object
      required:
        - endpoint
        - bucket
        - object
        - region
        - access_key
        - secret_key
        - dst
        - infrastructure
      properties:
        endpoint:
          description: S3 endpoint URL
          type: string
        bucket:
          description: Name of the bucket
          type: string
        object:
          description: Name of the object in the bucket to download 
          type: string
        region:
          description: Name of the storage region
          type: string
          default: local
        access_key:
          description: Access key
          type: string
        secret_key:
          description: Secret key 
          type: string
        dst:
          description: Path in the file system of the infrastructure to save the S3 object to 
          type: string
        infrastructure:
          description: Name of the HPC infrastructure
          type: string

    S3FileTransferStatus:
      description: File transfer status schema
      type: object
      required:
        - id
        - status
        - endpoint
        - bucket
        - object
        - region
        - dst
        - infrastructure
      properties:
        id:
          description: UUID of the file transfer
          type: string
          format: uuid
        endpoint:
          description: S3 endpoint URL
          type: string
        bucket:
          description: Name of the bucket
          type: string
        object:
          description: Name of the object in the bucket to download 
          type: string
        region:
          description: Name of the storage region
          type: string
          default: local
        dst:
          description: Path in the file system of the infrastructure to save the src file to 
          type: string
        infrastructure:
          description: Name of the HPC infrastructure
          type: string
        status:
          description: Status of the file transfer
          $ref: "#/components/schemas/FileTransferStatusCode"
        reason:
          description: Additional information, when something went wrong
          type: string
          default: ""

    JobStatusCode:
      type: string
      enum:
        - queued
        - running
        - completed

    FileTransferStatusCode:
      type: string
      enum:
        - transferring
        - completed
        - failure

    NodeStateCode:
      type: string
      enum:
        - idle
        - allocated
        - mixed

    SecureStorageMount:
      type: string
      default: none
      enum:
        - none
        - local
        - infrastructure

  # # In case the security mechanisms are needed to be implemented 
  # securitySchemes:
  #   apiKey:
  #     type: apiKey
  #     x-apikeyInfoFunc: hpc.api.service.security.check_api_key
  #     name: X-API-Key
  #     in: header
  #   oauth2:
  #     flows:
  #       password:
  #         tokenUrl: http://keycloak:8080/auth/realms/SERRANO/protocol/openid-connect/token
  #         scopes:
  #           email: Email of the user accessing the service.
  #     type: oauth2
  #     x-tokenInfoFunc: hpc.api.service.security.token_info
  #     x-scopeValidateFunc: hpc.api.service.security.validate_scope